// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_comm_conf.proto

#ifndef PROTOBUF_youme_5fcomm_5fconf_2eproto__INCLUDED
#define PROTOBUF_youme_5fcomm_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "youme_comm.pb.h"
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
void protobuf_AssignDesc_youme_5fcomm_5fconf_2eproto();
void protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto();

class AccesssInfo;
class CommConfReq;
class CommConfRsp;

enum SERVICE_TYPE {
  SERVICE_IM = 1,
  SERVICE_RTC = 2
};
bool SERVICE_TYPE_IsValid(int value);
const SERVICE_TYPE SERVICE_TYPE_MIN = SERVICE_IM;
const SERVICE_TYPE SERVICE_TYPE_MAX = SERVICE_RTC;
const int SERVICE_TYPE_ARRAYSIZE = SERVICE_TYPE_MAX + 1;

// ===================================================================

class CommConfReq : public ::youmecommon::protobuf::MessageLite {
 public:
  CommConfReq();
  virtual ~CommConfReq();

  CommConfReq(const CommConfReq& from);

  inline CommConfReq& operator=(const CommConfReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CommConfReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CommConfReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CommConfReq* other);

  // implements Message ----------------------------------------------

  inline CommConfReq* New() const { return New(NULL); }

  CommConfReq* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const CommConfReq& from);
  void MergeFrom(const CommConfReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommConfReq* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::youmecommon::protobuf::int32 version() const;
  void set_version(::youmecommon::protobuf::int32 value);

  // required string appkey = 2;
  bool has_appkey() const;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // required bytes verify = 3;
  bool has_verify() const;
  void clear_verify();
  static const int kVerifyFieldNumber = 3;
  const ::std::string& verify() const;
  void set_verify(const ::std::string& value);
  void set_verify(const char* value);
  void set_verify(const void* value, size_t size);
  ::std::string* mutable_verify();
  ::std::string* release_verify();
  void set_allocated_verify(::std::string* verify);

  // required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
  bool has_service_type() const;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 4;
  ::YOUMEServiceProtocol::SERVICE_TYPE service_type() const;
  void set_service_type(::YOUMEServiceProtocol::SERVICE_TYPE value);

  // required .YOUMECommonProtocol.DevicePlatform platform = 5;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 5;
  ::YOUMECommonProtocol::DevicePlatform platform() const;
  void set_platform(::YOUMECommonProtocol::DevicePlatform value);

  // required string brand = 6;
  bool has_brand() const;
  void clear_brand();
  static const int kBrandFieldNumber = 6;
  const ::std::string& brand() const;
  void set_brand(const ::std::string& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  ::std::string* mutable_brand();
  ::std::string* release_brand();
  void set_allocated_brand(::std::string* brand);

  // required string sys_version = 7;
  bool has_sys_version() const;
  void clear_sys_version();
  static const int kSysVersionFieldNumber = 7;
  const ::std::string& sys_version() const;
  void set_sys_version(const ::std::string& value);
  void set_sys_version(const char* value);
  void set_sys_version(const char* value, size_t size);
  ::std::string* mutable_sys_version();
  ::std::string* release_sys_version();
  void set_allocated_sys_version(::std::string* sys_version);

  // required string cpu_arch = 8;
  bool has_cpu_arch() const;
  void clear_cpu_arch();
  static const int kCpuArchFieldNumber = 8;
  const ::std::string& cpu_arch() const;
  void set_cpu_arch(const ::std::string& value);
  void set_cpu_arch(const char* value);
  void set_cpu_arch(const char* value, size_t size);
  ::std::string* mutable_cpu_arch();
  ::std::string* release_cpu_arch();
  void set_allocated_cpu_arch(::std::string* cpu_arch);

  // required string cpu_chip = 9;
  bool has_cpu_chip() const;
  void clear_cpu_chip();
  static const int kCpuChipFieldNumber = 9;
  const ::std::string& cpu_chip() const;
  void set_cpu_chip(const ::std::string& value);
  void set_cpu_chip(const char* value);
  void set_cpu_chip(const char* value, size_t size);
  ::std::string* mutable_cpu_chip();
  ::std::string* release_cpu_chip();
  void set_allocated_cpu_chip(::std::string* cpu_chip);

  // required string pkg_name = 10;
  bool has_pkg_name() const;
  void clear_pkg_name();
  static const int kPkgNameFieldNumber = 10;
  const ::std::string& pkg_name() const;
  void set_pkg_name(const ::std::string& value);
  void set_pkg_name(const char* value);
  void set_pkg_name(const char* value, size_t size);
  ::std::string* mutable_pkg_name();
  ::std::string* release_pkg_name();
  void set_allocated_pkg_name(::std::string* pkg_name);

  // required string device_token = 11;
  bool has_device_token() const;
  void clear_device_token();
  static const int kDeviceTokenFieldNumber = 11;
  const ::std::string& device_token() const;
  void set_device_token(const ::std::string& value);
  void set_device_token(const char* value);
  void set_device_token(const char* value, size_t size);
  ::std::string* mutable_device_token();
  ::std::string* release_device_token();
  void set_allocated_device_token(::std::string* device_token);

  // required string model = 12;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 12;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // required int32 sdk_version = 13;
  bool has_sdk_version() const;
  void clear_sdk_version();
  static const int kSdkVersionFieldNumber = 13;
  ::youmecommon::protobuf::int32 sdk_version() const;
  void set_sdk_version(::youmecommon::protobuf::int32 value);

  // required string sdk_name = 14;
  bool has_sdk_name() const;
  void clear_sdk_name();
  static const int kSdkNameFieldNumber = 14;
  const ::std::string& sdk_name() const;
  void set_sdk_name(const ::std::string& value);
  void set_sdk_name(const char* value);
  void set_sdk_name(const char* value, size_t size);
  ::std::string* mutable_sdk_name();
  ::std::string* release_sdk_name();
  void set_allocated_sdk_name(::std::string* sdk_name);

  // optional string strZone = 15;
  bool has_strzone() const;
  void clear_strzone();
  static const int kStrZoneFieldNumber = 15;
  const ::std::string& strzone() const;
  void set_strzone(const ::std::string& value);
  void set_strzone(const char* value);
  void set_strzone(const char* value, size_t size);
  ::std::string* mutable_strzone();
  ::std::string* release_strzone();
  void set_allocated_strzone(::std::string* strzone);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.CommConfReq)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_appkey();
  inline void clear_has_appkey();
  inline void set_has_verify();
  inline void clear_has_verify();
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_sys_version();
  inline void clear_has_sys_version();
  inline void set_has_cpu_arch();
  inline void clear_has_cpu_arch();
  inline void set_has_cpu_chip();
  inline void clear_has_cpu_chip();
  inline void set_has_pkg_name();
  inline void clear_has_pkg_name();
  inline void set_has_device_token();
  inline void clear_has_device_token();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_sdk_version();
  inline void clear_has_sdk_version();
  inline void set_has_sdk_name();
  inline void clear_has_sdk_name();
  inline void set_has_strzone();
  inline void clear_has_strzone();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr appkey_;
  ::youmecommon::protobuf::int32 version_;
  int service_type_;
  ::youmecommon::protobuf::internal::ArenaStringPtr verify_;
  ::youmecommon::protobuf::internal::ArenaStringPtr brand_;
  ::youmecommon::protobuf::internal::ArenaStringPtr sys_version_;
  ::youmecommon::protobuf::internal::ArenaStringPtr cpu_arch_;
  ::youmecommon::protobuf::internal::ArenaStringPtr cpu_chip_;
  int platform_;
  ::youmecommon::protobuf::int32 sdk_version_;
  ::youmecommon::protobuf::internal::ArenaStringPtr pkg_name_;
  ::youmecommon::protobuf::internal::ArenaStringPtr device_token_;
  ::youmecommon::protobuf::internal::ArenaStringPtr model_;
  ::youmecommon::protobuf::internal::ArenaStringPtr sdk_name_;
  ::youmecommon::protobuf::internal::ArenaStringPtr strzone_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5fcomm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static CommConfReq* default_instance_;
};
// -------------------------------------------------------------------

class AccesssInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  AccesssInfo();
  virtual ~AccesssInfo();

  AccesssInfo(const AccesssInfo& from);

  inline AccesssInfo& operator=(const AccesssInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const AccesssInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AccesssInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AccesssInfo* other);

  // implements Message ----------------------------------------------

  inline AccesssInfo* New() const { return New(NULL); }

  AccesssInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const AccesssInfo& from);
  void MergeFrom(const AccesssInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccesssInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string svr_addr = 1;
  bool has_svr_addr() const;
  void clear_svr_addr();
  static const int kSvrAddrFieldNumber = 1;
  const ::std::string& svr_addr() const;
  void set_svr_addr(const ::std::string& value);
  void set_svr_addr(const char* value);
  void set_svr_addr(const char* value, size_t size);
  ::std::string* mutable_svr_addr();
  ::std::string* release_svr_addr();
  void set_allocated_svr_addr(::std::string* svr_addr);

  // required uint32 svr_port = 2;
  bool has_svr_port() const;
  void clear_svr_port();
  static const int kSvrPortFieldNumber = 2;
  ::youmecommon::protobuf::uint32 svr_port() const;
  void set_svr_port(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.AccesssInfo)
 private:
  inline void set_has_svr_addr();
  inline void clear_has_svr_addr();
  inline void set_has_svr_port();
  inline void clear_has_svr_port();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr svr_addr_;
  ::youmecommon::protobuf::uint32 svr_port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5fcomm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static AccesssInfo* default_instance_;
};
// -------------------------------------------------------------------

class CommConfRsp : public ::youmecommon::protobuf::MessageLite {
 public:
  CommConfRsp();
  virtual ~CommConfRsp();

  CommConfRsp(const CommConfRsp& from);

  inline CommConfRsp& operator=(const CommConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CommConfRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CommConfRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CommConfRsp* other);

  // implements Message ----------------------------------------------

  inline CommConfRsp* New() const { return New(NULL); }

  CommConfRsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const CommConfRsp& from);
  void MergeFrom(const CommConfRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommConfRsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::youmecommon::protobuf::int32 version() const;
  void set_version(::youmecommon::protobuf::int32 value);

  // required int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::youmecommon::protobuf::int32 ret() const;
  void set_ret(::youmecommon::protobuf::int32 value);

  // required uint64 svr_time = 3;
  bool has_svr_time() const;
  void clear_svr_time();
  static const int kSvrTimeFieldNumber = 3;
  ::youmecommon::protobuf::uint64 svr_time() const;
  void set_svr_time(::youmecommon::protobuf::uint64 value);

  // required int32 appid = 4;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  ::youmecommon::protobuf::int32 appid() const;
  void set_appid(::youmecommon::protobuf::int32 value);

  // required string svr_addr = 5;
  bool has_svr_addr() const;
  void clear_svr_addr();
  static const int kSvrAddrFieldNumber = 5;
  const ::std::string& svr_addr() const;
  void set_svr_addr(const ::std::string& value);
  void set_svr_addr(const char* value);
  void set_svr_addr(const char* value, size_t size);
  ::std::string* mutable_svr_addr();
  ::std::string* release_svr_addr();
  void set_allocated_svr_addr(::std::string* svr_addr);

  // required int32 svr_port = 6;
  bool has_svr_port() const;
  void clear_svr_port();
  static const int kSvrPortFieldNumber = 6;
  ::youmecommon::protobuf::int32 svr_port() const;
  void set_svr_port(::youmecommon::protobuf::int32 value);

  // repeated .YOUMECommonProtocol.NameValue conf = 7;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 7;
  const ::YOUMECommonProtocol::NameValue& conf(int index) const;
  ::YOUMECommonProtocol::NameValue* mutable_conf(int index);
  ::YOUMECommonProtocol::NameValue* add_conf();
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
      mutable_conf();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
      conf() const;

  // repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
  int svr_list_size() const;
  void clear_svr_list();
  static const int kSvrListFieldNumber = 8;
  const ::YOUMEServiceProtocol::AccesssInfo& svr_list(int index) const;
  ::YOUMEServiceProtocol::AccesssInfo* mutable_svr_list(int index);
  ::YOUMEServiceProtocol::AccesssInfo* add_svr_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >*
      mutable_svr_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >&
      svr_list() const;

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.CommConfRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_svr_addr();
  inline void clear_has_svr_addr();
  inline void set_has_svr_port();
  inline void clear_has_svr_port();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 version_;
  ::youmecommon::protobuf::int32 ret_;
  ::youmecommon::protobuf::uint64 svr_time_;
  ::youmecommon::protobuf::internal::ArenaStringPtr svr_addr_;
  ::youmecommon::protobuf::int32 appid_;
  ::youmecommon::protobuf::int32 svr_port_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue > conf_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo > svr_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5fcomm_5fconf_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5fcomm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_youme_5fcomm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static CommConfRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CommConfReq

// required int32 version = 1;
inline bool CommConfReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommConfReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommConfReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommConfReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::youmecommon::protobuf::int32 CommConfReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.version)
  return version_;
}
inline void CommConfReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.version)
}

// required string appkey = 2;
inline bool CommConfReq::has_appkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommConfReq::set_has_appkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommConfReq::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommConfReq::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appkey();
}
inline const ::std::string& CommConfReq::appkey() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.appkey)
  return appkey_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_appkey(const ::std::string& value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.appkey)
}
inline void CommConfReq::set_appkey(const char* value) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.appkey)
}
inline void CommConfReq::set_appkey(const char* value, size_t size) {
  set_has_appkey();
  appkey_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.appkey)
}
inline ::std::string* CommConfReq::mutable_appkey() {
  set_has_appkey();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.appkey)
  return appkey_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_appkey() {
  clear_has_appkey();
  return appkey_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    set_has_appkey();
  } else {
    clear_has_appkey();
  }
  appkey_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.appkey)
}

// required bytes verify = 3;
inline bool CommConfReq::has_verify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommConfReq::set_has_verify() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommConfReq::clear_has_verify() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommConfReq::clear_verify() {
  verify_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verify();
}
inline const ::std::string& CommConfReq::verify() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.verify)
  return verify_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_verify(const ::std::string& value) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.verify)
}
inline void CommConfReq::set_verify(const char* value) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.verify)
}
inline void CommConfReq::set_verify(const void* value, size_t size) {
  set_has_verify();
  verify_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.verify)
}
inline ::std::string* CommConfReq::mutable_verify() {
  set_has_verify();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.verify)
  return verify_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_verify() {
  clear_has_verify();
  return verify_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_verify(::std::string* verify) {
  if (verify != NULL) {
    set_has_verify();
  } else {
    clear_has_verify();
  }
  verify_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), verify);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.verify)
}

// required .YOUMEServiceProtocol.SERVICE_TYPE service_type = 4;
inline bool CommConfReq::has_service_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommConfReq::set_has_service_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommConfReq::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommConfReq::clear_service_type() {
  service_type_ = 1;
  clear_has_service_type();
}
inline ::YOUMEServiceProtocol::SERVICE_TYPE CommConfReq::service_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.service_type)
  return static_cast< ::YOUMEServiceProtocol::SERVICE_TYPE >(service_type_);
}
inline void CommConfReq::set_service_type(::YOUMEServiceProtocol::SERVICE_TYPE value) {
  assert(::YOUMEServiceProtocol::SERVICE_TYPE_IsValid(value));
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.service_type)
}

// required .YOUMECommonProtocol.DevicePlatform platform = 5;
inline bool CommConfReq::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommConfReq::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommConfReq::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommConfReq::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::YOUMECommonProtocol::DevicePlatform CommConfReq::platform() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.platform)
  return static_cast< ::YOUMECommonProtocol::DevicePlatform >(platform_);
}
inline void CommConfReq::set_platform(::YOUMECommonProtocol::DevicePlatform value) {
  assert(::YOUMECommonProtocol::DevicePlatform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.platform)
}

// required string brand = 6;
inline bool CommConfReq::has_brand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommConfReq::set_has_brand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommConfReq::clear_has_brand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommConfReq::clear_brand() {
  brand_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
inline const ::std::string& CommConfReq::brand() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.brand)
  return brand_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.brand)
}
inline void CommConfReq::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.brand)
}
inline void CommConfReq::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.brand)
}
inline ::std::string* CommConfReq::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.brand)
  return brand_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_brand() {
  clear_has_brand();
  return brand_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.brand)
}

// required string sys_version = 7;
inline bool CommConfReq::has_sys_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommConfReq::set_has_sys_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommConfReq::clear_has_sys_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommConfReq::clear_sys_version() {
  sys_version_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sys_version();
}
inline const ::std::string& CommConfReq::sys_version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sys_version)
  return sys_version_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_sys_version(const ::std::string& value) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sys_version)
}
inline void CommConfReq::set_sys_version(const char* value) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.sys_version)
}
inline void CommConfReq::set_sys_version(const char* value, size_t size) {
  set_has_sys_version();
  sys_version_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.sys_version)
}
inline ::std::string* CommConfReq::mutable_sys_version() {
  set_has_sys_version();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.sys_version)
  return sys_version_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_sys_version() {
  clear_has_sys_version();
  return sys_version_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_sys_version(::std::string* sys_version) {
  if (sys_version != NULL) {
    set_has_sys_version();
  } else {
    clear_has_sys_version();
  }
  sys_version_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sys_version);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.sys_version)
}

// required string cpu_arch = 8;
inline bool CommConfReq::has_cpu_arch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommConfReq::set_has_cpu_arch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommConfReq::clear_has_cpu_arch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommConfReq::clear_cpu_arch() {
  cpu_arch_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_arch();
}
inline const ::std::string& CommConfReq::cpu_arch() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.cpu_arch)
  return cpu_arch_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_cpu_arch(const ::std::string& value) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
inline void CommConfReq::set_cpu_arch(const char* value) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
inline void CommConfReq::set_cpu_arch(const char* value, size_t size) {
  set_has_cpu_arch();
  cpu_arch_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}
inline ::std::string* CommConfReq::mutable_cpu_arch() {
  set_has_cpu_arch();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.cpu_arch)
  return cpu_arch_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_cpu_arch() {
  clear_has_cpu_arch();
  return cpu_arch_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_cpu_arch(::std::string* cpu_arch) {
  if (cpu_arch != NULL) {
    set_has_cpu_arch();
  } else {
    clear_has_cpu_arch();
  }
  cpu_arch_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_arch);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.cpu_arch)
}

// required string cpu_chip = 9;
inline bool CommConfReq::has_cpu_chip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommConfReq::set_has_cpu_chip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommConfReq::clear_has_cpu_chip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommConfReq::clear_cpu_chip() {
  cpu_chip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpu_chip();
}
inline const ::std::string& CommConfReq::cpu_chip() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.cpu_chip)
  return cpu_chip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_cpu_chip(const ::std::string& value) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
inline void CommConfReq::set_cpu_chip(const char* value) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
inline void CommConfReq::set_cpu_chip(const char* value, size_t size) {
  set_has_cpu_chip();
  cpu_chip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}
inline ::std::string* CommConfReq::mutable_cpu_chip() {
  set_has_cpu_chip();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.cpu_chip)
  return cpu_chip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_cpu_chip() {
  clear_has_cpu_chip();
  return cpu_chip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_cpu_chip(::std::string* cpu_chip) {
  if (cpu_chip != NULL) {
    set_has_cpu_chip();
  } else {
    clear_has_cpu_chip();
  }
  cpu_chip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_chip);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.cpu_chip)
}

// required string pkg_name = 10;
inline bool CommConfReq::has_pkg_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommConfReq::set_has_pkg_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommConfReq::clear_has_pkg_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommConfReq::clear_pkg_name() {
  pkg_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pkg_name();
}
inline const ::std::string& CommConfReq::pkg_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.pkg_name)
  return pkg_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_pkg_name(const ::std::string& value) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
inline void CommConfReq::set_pkg_name(const char* value) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
inline void CommConfReq::set_pkg_name(const char* value, size_t size) {
  set_has_pkg_name();
  pkg_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.pkg_name)
}
inline ::std::string* CommConfReq::mutable_pkg_name() {
  set_has_pkg_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.pkg_name)
  return pkg_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_pkg_name() {
  clear_has_pkg_name();
  return pkg_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_pkg_name(::std::string* pkg_name) {
  if (pkg_name != NULL) {
    set_has_pkg_name();
  } else {
    clear_has_pkg_name();
  }
  pkg_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), pkg_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.pkg_name)
}

// required string device_token = 11;
inline bool CommConfReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommConfReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommConfReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommConfReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
inline const ::std::string& CommConfReq::device_token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.device_token)
  return device_token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.device_token)
}
inline void CommConfReq::set_device_token(const char* value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.device_token)
}
inline void CommConfReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.device_token)
}
inline ::std::string* CommConfReq::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.device_token)
  return device_token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_device_token() {
  clear_has_device_token();
  return device_token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.device_token)
}

// required string model = 12;
inline bool CommConfReq::has_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CommConfReq::set_has_model() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CommConfReq::clear_has_model() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CommConfReq::clear_model() {
  model_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& CommConfReq::model() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.model)
  return model_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.model)
}
inline void CommConfReq::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.model)
}
inline void CommConfReq::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.model)
}
inline ::std::string* CommConfReq::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.model)
  return model_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_model() {
  clear_has_model();
  return model_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.model)
}

// required int32 sdk_version = 13;
inline bool CommConfReq::has_sdk_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CommConfReq::set_has_sdk_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CommConfReq::clear_has_sdk_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CommConfReq::clear_sdk_version() {
  sdk_version_ = 0;
  clear_has_sdk_version();
}
inline ::youmecommon::protobuf::int32 CommConfReq::sdk_version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sdk_version)
  return sdk_version_;
}
inline void CommConfReq::set_sdk_version(::youmecommon::protobuf::int32 value) {
  set_has_sdk_version();
  sdk_version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sdk_version)
}

// required string sdk_name = 14;
inline bool CommConfReq::has_sdk_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CommConfReq::set_has_sdk_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CommConfReq::clear_has_sdk_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CommConfReq::clear_sdk_name() {
  sdk_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdk_name();
}
inline const ::std::string& CommConfReq::sdk_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.sdk_name)
  return sdk_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_sdk_name(const ::std::string& value) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
inline void CommConfReq::set_sdk_name(const char* value) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
inline void CommConfReq::set_sdk_name(const char* value, size_t size) {
  set_has_sdk_name();
  sdk_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.sdk_name)
}
inline ::std::string* CommConfReq::mutable_sdk_name() {
  set_has_sdk_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.sdk_name)
  return sdk_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_sdk_name() {
  clear_has_sdk_name();
  return sdk_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_sdk_name(::std::string* sdk_name) {
  if (sdk_name != NULL) {
    set_has_sdk_name();
  } else {
    clear_has_sdk_name();
  }
  sdk_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.sdk_name)
}

// optional string strZone = 15;
inline bool CommConfReq::has_strzone() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CommConfReq::set_has_strzone() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CommConfReq::clear_has_strzone() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CommConfReq::clear_strzone() {
  strzone_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strzone();
}
inline const ::std::string& CommConfReq::strzone() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfReq.strZone)
  return strzone_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_strzone(const ::std::string& value) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfReq.strZone)
}
inline void CommConfReq::set_strzone(const char* value) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfReq.strZone)
}
inline void CommConfReq::set_strzone(const char* value, size_t size) {
  set_has_strzone();
  strzone_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfReq.strZone)
}
inline ::std::string* CommConfReq::mutable_strzone() {
  set_has_strzone();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfReq.strZone)
  return strzone_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfReq::release_strzone() {
  clear_has_strzone();
  return strzone_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfReq::set_allocated_strzone(::std::string* strzone) {
  if (strzone != NULL) {
    set_has_strzone();
  } else {
    clear_has_strzone();
  }
  strzone_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), strzone);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfReq.strZone)
}

// -------------------------------------------------------------------

// AccesssInfo

// required string svr_addr = 1;
inline bool AccesssInfo::has_svr_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccesssInfo::set_has_svr_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccesssInfo::clear_has_svr_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccesssInfo::clear_svr_addr() {
  svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svr_addr();
}
inline const ::std::string& AccesssInfo::svr_addr() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AccesssInfo.svr_addr)
  return svr_addr_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccesssInfo::set_svr_addr(const ::std::string& value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
inline void AccesssInfo::set_svr_addr(const char* value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
inline void AccesssInfo::set_svr_addr(const char* value, size_t size) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}
inline ::std::string* AccesssInfo::mutable_svr_addr() {
  set_has_svr_addr();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.AccesssInfo.svr_addr)
  return svr_addr_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccesssInfo::release_svr_addr() {
  clear_has_svr_addr();
  return svr_addr_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccesssInfo::set_allocated_svr_addr(::std::string* svr_addr) {
  if (svr_addr != NULL) {
    set_has_svr_addr();
  } else {
    clear_has_svr_addr();
  }
  svr_addr_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), svr_addr);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.AccesssInfo.svr_addr)
}

// required uint32 svr_port = 2;
inline bool AccesssInfo::has_svr_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccesssInfo::set_has_svr_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccesssInfo::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccesssInfo::clear_svr_port() {
  svr_port_ = 0u;
  clear_has_svr_port();
}
inline ::youmecommon::protobuf::uint32 AccesssInfo::svr_port() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AccesssInfo.svr_port)
  return svr_port_;
}
inline void AccesssInfo::set_svr_port(::youmecommon::protobuf::uint32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AccesssInfo.svr_port)
}

// -------------------------------------------------------------------

// CommConfRsp

// required int32 version = 1;
inline bool CommConfRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommConfRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommConfRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommConfRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::youmecommon::protobuf::int32 CommConfRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.version)
  return version_;
}
inline void CommConfRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.version)
}

// required int32 ret = 2;
inline bool CommConfRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommConfRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommConfRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommConfRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::youmecommon::protobuf::int32 CommConfRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.ret)
  return ret_;
}
inline void CommConfRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.ret)
}

// required uint64 svr_time = 3;
inline bool CommConfRsp::has_svr_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommConfRsp::set_has_svr_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommConfRsp::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommConfRsp::clear_svr_time() {
  svr_time_ = GOOGLE_ULONGLONG(0);
  clear_has_svr_time();
}
inline ::youmecommon::protobuf::uint64 CommConfRsp::svr_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_time)
  return svr_time_;
}
inline void CommConfRsp::set_svr_time(::youmecommon::protobuf::uint64 value) {
  set_has_svr_time();
  svr_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_time)
}

// required int32 appid = 4;
inline bool CommConfRsp::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommConfRsp::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommConfRsp::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommConfRsp::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::youmecommon::protobuf::int32 CommConfRsp::appid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.appid)
  return appid_;
}
inline void CommConfRsp::set_appid(::youmecommon::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.appid)
}

// required string svr_addr = 5;
inline bool CommConfRsp::has_svr_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommConfRsp::set_has_svr_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommConfRsp::clear_has_svr_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommConfRsp::clear_svr_addr() {
  svr_addr_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svr_addr();
}
inline const ::std::string& CommConfRsp::svr_addr() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_addr)
  return svr_addr_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfRsp::set_svr_addr(const ::std::string& value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
inline void CommConfRsp::set_svr_addr(const char* value) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
inline void CommConfRsp::set_svr_addr(const char* value, size_t size) {
  set_has_svr_addr();
  svr_addr_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}
inline ::std::string* CommConfRsp::mutable_svr_addr() {
  set_has_svr_addr();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.svr_addr)
  return svr_addr_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommConfRsp::release_svr_addr() {
  clear_has_svr_addr();
  return svr_addr_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommConfRsp::set_allocated_svr_addr(::std::string* svr_addr) {
  if (svr_addr != NULL) {
    set_has_svr_addr();
  } else {
    clear_has_svr_addr();
  }
  svr_addr_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), svr_addr);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CommConfRsp.svr_addr)
}

// required int32 svr_port = 6;
inline bool CommConfRsp::has_svr_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommConfRsp::set_has_svr_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommConfRsp::clear_has_svr_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommConfRsp::clear_svr_port() {
  svr_port_ = 0;
  clear_has_svr_port();
}
inline ::youmecommon::protobuf::int32 CommConfRsp::svr_port() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_port)
  return svr_port_;
}
inline void CommConfRsp::set_svr_port(::youmecommon::protobuf::int32 value) {
  set_has_svr_port();
  svr_port_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CommConfRsp.svr_port)
}

// repeated .YOUMECommonProtocol.NameValue conf = 7;
inline int CommConfRsp::conf_size() const {
  return conf_.size();
}
inline void CommConfRsp::clear_conf() {
  conf_.Clear();
}
inline const ::YOUMECommonProtocol::NameValue& CommConfRsp::conf(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Get(index);
}
inline ::YOUMECommonProtocol::NameValue* CommConfRsp::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Mutable(index);
}
inline ::YOUMECommonProtocol::NameValue* CommConfRsp::add_conf() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
CommConfRsp::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.CommConfRsp.conf)
  return &conf_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
CommConfRsp::conf() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.CommConfRsp.conf)
  return conf_;
}

// repeated .YOUMEServiceProtocol.AccesssInfo svr_list = 8;
inline int CommConfRsp::svr_list_size() const {
  return svr_list_.size();
}
inline void CommConfRsp::clear_svr_list() {
  svr_list_.Clear();
}
inline const ::YOUMEServiceProtocol::AccesssInfo& CommConfRsp::svr_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Get(index);
}
inline ::YOUMEServiceProtocol::AccesssInfo* CommConfRsp::mutable_svr_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Mutable(index);
}
inline ::YOUMEServiceProtocol::AccesssInfo* CommConfRsp::add_svr_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >*
CommConfRsp::mutable_svr_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return &svr_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::AccesssInfo >&
CommConfRsp::svr_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.CommConfRsp.svr_list)
  return svr_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YOUMEServiceProtocol::SERVICE_TYPE> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace youmecommon
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youme_5fcomm_5fconf_2eproto__INCLUDED
