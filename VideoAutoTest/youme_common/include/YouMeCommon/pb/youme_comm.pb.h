// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_comm.proto

#ifndef PROTOBUF_youme_5fcomm_2eproto__INCLUDED
#define PROTOBUF_youme_5fcomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace YOUMECommonProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_youme_5fcomm_2eproto();
void protobuf_AssignDesc_youme_5fcomm_2eproto();
void protobuf_ShutdownFile_youme_5fcomm_2eproto();

class MsgComment;
class NameValue;

enum VALUE_TYPE {
  VALUE_UNKNOW = 0,
  VALUE_INT32 = 1,
  VALUE_UIN32 = 2,
  VALUE_INT64 = 3,
  VALUE_UINT64 = 4,
  VALUE_STRING = 5,
  VALUE_BYTES = 6,
  VALUE_BOOL = 7,
  VALUE_BLOB = 8
};
bool VALUE_TYPE_IsValid(int value);
const VALUE_TYPE VALUE_TYPE_MIN = VALUE_UNKNOW;
const VALUE_TYPE VALUE_TYPE_MAX = VALUE_BLOB;
const int VALUE_TYPE_ARRAYSIZE = VALUE_TYPE_MAX + 1;

enum DevicePlatform {
  Platform_Unknow = 0,
  Platform_Android = 1,
  Platform_IOS = 2,
  Platform_Windows = 3,
  Platform_OSX = 4,
  Platform_Linux = 5
};
bool DevicePlatform_IsValid(int value);
const DevicePlatform DevicePlatform_MIN = Platform_Unknow;
const DevicePlatform DevicePlatform_MAX = Platform_Linux;
const int DevicePlatform_ARRAYSIZE = DevicePlatform_MAX + 1;

enum DistrictLevel {
  DISTRICT_COUNTRY = 1,
  DISTRICT_PROVINCE = 2,
  DISTRICT_CITY = 3,
  DISTRICT_COUNTY = 4,
  DISTRICT_STREET = 5
};
bool DistrictLevel_IsValid(int value);
const DistrictLevel DistrictLevel_MIN = DISTRICT_COUNTRY;
const DistrictLevel DistrictLevel_MAX = DISTRICT_STREET;
const int DistrictLevel_ARRAYSIZE = DistrictLevel_MAX + 1;

// ===================================================================

class NameValue : public ::youmecommon::protobuf::MessageLite {
 public:
  NameValue();
  virtual ~NameValue();

  NameValue(const NameValue& from);

  inline NameValue& operator=(const NameValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const NameValue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NameValue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NameValue* other);

  // implements Message ----------------------------------------------

  inline NameValue* New() const { return New(NULL); }

  NameValue* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const NameValue& from);
  void MergeFrom(const NameValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NameValue* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required .YOUMECommonProtocol.VALUE_TYPE value_type = 3;
  bool has_value_type() const;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 3;
  ::YOUMECommonProtocol::VALUE_TYPE value_type() const;
  void set_value_type(::YOUMECommonProtocol::VALUE_TYPE value);

  // @@protoc_insertion_point(class_scope:YOUMECommonProtocol.NameValue)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_value_type();
  inline void clear_has_value_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr name_;
  ::youmecommon::protobuf::internal::ArenaStringPtr value_;
  int value_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5fcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5fcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_youme_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static NameValue* default_instance_;
};
// -------------------------------------------------------------------

class MsgComment : public ::youmecommon::protobuf::MessageLite {
 public:
  MsgComment();
  virtual ~MsgComment();

  MsgComment(const MsgComment& from);

  inline MsgComment& operator=(const MsgComment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const MsgComment& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MsgComment* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MsgComment* other);

  // implements Message ----------------------------------------------

  inline MsgComment* New() const { return New(NULL); }

  MsgComment* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const MsgComment& from);
  void MergeFrom(const MsgComment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgComment* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .YOUMECommonProtocol.NameValue comment = 1;
  int comment_size() const;
  void clear_comment();
  static const int kCommentFieldNumber = 1;
  const ::YOUMECommonProtocol::NameValue& comment(int index) const;
  ::YOUMECommonProtocol::NameValue* mutable_comment(int index);
  ::YOUMECommonProtocol::NameValue* add_comment();
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
      mutable_comment();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
      comment() const;

  // @@protoc_insertion_point(class_scope:YOUMECommonProtocol.MsgComment)
 private:

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue > comment_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5fcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5fcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_youme_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static MsgComment* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NameValue

// required string name = 1;
inline bool NameValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameValue::clear_name() {
  name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NameValue::name() const {
  // @@protoc_insertion_point(field_get:YOUMECommonProtocol.NameValue.name)
  return name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMECommonProtocol.NameValue.name)
}
inline void NameValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMECommonProtocol.NameValue.name)
}
inline void NameValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMECommonProtocol.NameValue.name)
}
inline ::std::string* NameValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:YOUMECommonProtocol.NameValue.name)
  return name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameValue::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YOUMECommonProtocol.NameValue.name)
}

// required string value = 2;
inline bool NameValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameValue::clear_value() {
  value_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& NameValue::value() const {
  // @@protoc_insertion_point(field_get:YOUMECommonProtocol.NameValue.value)
  return value_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMECommonProtocol.NameValue.value)
}
inline void NameValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMECommonProtocol.NameValue.value)
}
inline void NameValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMECommonProtocol.NameValue.value)
}
inline ::std::string* NameValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:YOUMECommonProtocol.NameValue.value)
  return value_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:YOUMECommonProtocol.NameValue.value)
}

// required .YOUMECommonProtocol.VALUE_TYPE value_type = 3;
inline bool NameValue::has_value_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameValue::set_has_value_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameValue::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameValue::clear_value_type() {
  value_type_ = 0;
  clear_has_value_type();
}
inline ::YOUMECommonProtocol::VALUE_TYPE NameValue::value_type() const {
  // @@protoc_insertion_point(field_get:YOUMECommonProtocol.NameValue.value_type)
  return static_cast< ::YOUMECommonProtocol::VALUE_TYPE >(value_type_);
}
inline void NameValue::set_value_type(::YOUMECommonProtocol::VALUE_TYPE value) {
  assert(::YOUMECommonProtocol::VALUE_TYPE_IsValid(value));
  set_has_value_type();
  value_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMECommonProtocol.NameValue.value_type)
}

// -------------------------------------------------------------------

// MsgComment

// repeated .YOUMECommonProtocol.NameValue comment = 1;
inline int MsgComment::comment_size() const {
  return comment_.size();
}
inline void MsgComment::clear_comment() {
  comment_.Clear();
}
inline const ::YOUMECommonProtocol::NameValue& MsgComment::comment(int index) const {
  // @@protoc_insertion_point(field_get:YOUMECommonProtocol.MsgComment.comment)
  return comment_.Get(index);
}
inline ::YOUMECommonProtocol::NameValue* MsgComment::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMECommonProtocol.MsgComment.comment)
  return comment_.Mutable(index);
}
inline ::YOUMECommonProtocol::NameValue* MsgComment::add_comment() {
  // @@protoc_insertion_point(field_add:YOUMECommonProtocol.MsgComment.comment)
  return comment_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
MsgComment::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:YOUMECommonProtocol.MsgComment.comment)
  return &comment_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
MsgComment::comment() const {
  // @@protoc_insertion_point(field_list:YOUMECommonProtocol.MsgComment.comment)
  return comment_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMECommonProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YOUMECommonProtocol::VALUE_TYPE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YOUMECommonProtocol::DevicePlatform> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YOUMECommonProtocol::DistrictLevel> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youme_5fcomm_2eproto__INCLUDED
